---
import { paths } from "./starling-params";
import { data } from "./starling-data";
export function getStaticPaths() {
  return paths;
}

import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";

const { w } = Astro.params;

const ret = data[w];
let reta = Object.keys(ret);
let meaning = ret.Meaning;
let comment = ret.Comments;
reta.sort();
reta = reta.filter((item) => item !== "Meaning");
reta = reta.filter((item) => item !== "Russian meaning");
reta = reta.filter((item) => item !== "Turkish meaning");
reta = reta.filter((item) => item !== "Nostratic");
reta = reta.filter((item) => item !== "id");
reta = reta.filter((item) => item !== "Comments");
reta = reta.filter((item) => item !== "Altaic etymology");
reta = reta.filter((item) => item !== "Altaic etymology ");
reta = reta.filter((item) => item !== " Altaic etymology");
reta = reta.filter((item) => item !== "Pronounce");
reta = reta.filter((item) => item !== "pronounce");

if (reta.includes("Middle Turkic")) {
  reta = reta.filter((item) => item !== "Middle Turkic");
  reta.unshift("Middle Turkic");
}
if (reta.includes("Old Turkic")) {
  reta = reta.filter((item) => item !== "Old Turkic");
  reta.unshift("Old Turkic");
}
if (reta.includes("Proto-Turkic")) {
  reta = reta.filter((item) => item !== "Proto-Turkic");
  reta.unshift("Proto-Turkic");
}
if (reta.includes(" Proto-Altaic")) {
  reta = reta.filter((item) => item !== " Proto-Altaic");
  reta.unshift(" Proto-Altaic");
}

// remove Japanese, Korean, Mongolian, Tungusic, Turkic, Uralic, and add them back at the bottom in order
if (reta.includes("Japanese")) {
  reta = reta.filter((item) => item !== "Japanese");
  reta.push("Japanese");
}
if (reta.includes("Korean")) {
  reta = reta.filter((item) => item !== "Korean");
  reta.push("Korean");
}
if (reta.includes("Mongolian")) {
  reta = reta.filter((item) => item !== "Mongolian");
  reta.push("Mongolian");
}
if (reta.includes("Tungusic")) {
  reta = reta.filter((item) => item !== "Tungusic");
  reta.push("Tungusic");
}
---

<style>
  .container {
    padding: 10px;
    margin: 10px;
    border-radius: 5px;
    border: 1px solid rgb(32, 31, 31);
  }
  strong {
    padding: 10px;
    margin: 10px;
    border-radius: 5px;
    background-color: rgba(0, 238, 255, 0.205);
    font-weight: bold;
  }
  .container2 {
    padding: 10px;
    margin: 10px;
    border-radius: 5px;
    background-color: rgba(0, 238, 255, 0.205);
    font-weight: bold;
  }

  .hide {
    display: none;
  }
</style>

<StarlightPage frontmatter={{ title: ret.pronounce || "" }}>
  <ul>
    <div class="container2" data-pagefind-filter="Proto Türkçe Sözlük: Anlam">
      {meaning}
    </div>
    {
      reta.map((item) => (
        <div
          class="container bg-red-200"
          data-pagefind-filter={"Proto Türkçe Sözlük:" + item}
        >
          <strong>{item.replace("-", " ")}</strong>: {ret[item]}
        </div>
      ))
    }
    <br />
    <div class="container">
      {comment}
    </div>
  </ul>
</StarlightPage>
